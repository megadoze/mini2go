import { useEffect, useState, useMemo, useCallback } from "react";
import { useLocation, useNavigate, useLoaderData } from "react-router-dom";
import {
  useInfiniteQuery,
  useQuery,
  useQueryClient,
  type InfiniteData,
} from "@tanstack/react-query";
import { Badge, Loader, TextInput, Drawer } from "@mantine/core";
import {
  MagnifyingGlassIcon,
  XMarkIcon,
  FunnelIcon,
} from "@heroicons/react/24/outline";

import CarTable from "./—ÅarTable"; // –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—É—Ç –Ω–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è `—Å`
import { fetchCarsPageByHost } from "@/services/car.service";
import {
  fetchCountries,
  fetchLocationsByCountry,
} from "@/services/geo.service";

import type { CarWithRelations } from "@/types/carWithRelations";
import type { Country } from "@/types/country";
import type { Location } from "@/types/location";
import type { CarStatus } from "@/components/carFilters";
import CarFilters from "@/components/carFilters";
import { supabase } from "@/lib/supabase";
import { QK } from "@/queryKeys";

const PAGE_SIZE = 10;
type Page = { items: CarWithRelations[]; count: number };

export default function CarsPage() {
  // ‚≠êÔ∏è ownerId –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ loader (–∫–∞–∫ –≤ –±—Ä–æ–Ω—è—Ö)
  const { ownerId } = (useLoaderData() as { ownerId: string | null }) ?? {
    ownerId: null,
  };

  const navigate = useNavigate();
  const qc = useQueryClient();
  const loc = useLocation();

  // UI
  const [countryId, setCountryId] = useState<string | null>(null);
  const [locationFilter, setLocationFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState<CarStatus>("");
  const [search, setSearch] = useState("");
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);

  /* -------- geo queries -------- */
  const countriesQ = useQuery<Country[], Error>({
    queryKey: ["countries"],
    queryFn: fetchCountries,
    initialData: qc.getQueryData<Country[]>(["countries"]),
    staleTime: 24 * 60 * 60 * 1000,
    gcTime: 7 * 24 * 60 * 60 * 1000,
    refetchOnMount: false,
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
    retry: 1,
    placeholderData: (prev) => prev,
  });

  const locationsQ = useQuery<Location[], Error>({
    queryKey: ["locations", countryId],
    queryFn: () => fetchLocationsByCountry(countryId!),
    enabled: !!countryId,
    initialData: countryId
      ? qc.getQueryData<Location[]>(["locations", countryId])
      : [],
    staleTime: 24 * 60 * 60 * 1000,
    gcTime: 7 * 24 * 60 * 60 * 1000,
    refetchOnMount: false,
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
    retry: 1,
    placeholderData: (prev) => prev ?? [],
  });

  /* -------- cars infinite query -------- */
  const currentKey = ["carsByHost", PAGE_SIZE, ownerId] as const;

  const carsQ = useInfiniteQuery<
    { items: CarWithRelations[]; count: number },
    Error
  >({
    queryKey: currentKey,
    enabled: !!ownerId, // –∫–ª—é—á –∏–∑–≤–µ—Å—Ç–µ–Ω —Å—Ä–∞–∑—É, thanks to loader
    queryFn: async ({ pageParam }) => {
      const pageIndex = typeof pageParam === "number" ? pageParam : 0;
      const offset = pageIndex * PAGE_SIZE;
      return fetchCarsPageByHost({
        ownerId: ownerId as string,
        limit: PAGE_SIZE,
        offset,
      });
    },
    getNextPageParam: (lastPage, allPages) => {
      const loaded = allPages.reduce((acc, p) => acc + p.items.length, 0);
      const total = lastPage.count ?? loaded;
      return loaded < total ? allPages.length : undefined;
    },
    initialPageParam: 0,
    staleTime: 5 * 60 * 1000,
    gcTime: 7 * 24 * 60 * 60 * 1000,
    refetchOnMount: false,
    refetchOnWindowFocus: true,
    refetchOnReconnect: true,
    retry: 1,
    // –∑–∞–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Ç—ã–π –≤ loader –∫—ç—à –∫–∞–∫ initial
    initialData: ownerId
      ? () => qc.getQueryData<InfiniteData<Page>>(currentKey)
      : undefined,
    // –∏ –¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–µ—Ç—á–µ
    placeholderData: (prev) => prev,
  });

  // ‚úÇÔ∏è –æ–±—Ä–µ–∑–∫–∞ –∫—ç—à–∞ –¥–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const trimToFirstPage = () => {
    qc.setQueryData<InfiniteData<Page>>(currentKey, (old) => {
      if (!old?.pages?.length) return old;
      return { pages: [old.pages[0]], pageParams: [0] };
    });
  };

  // üëá —ç—Ç–æ –Ω–∞–¥–æ –î–û useEffect —Å –∫–∞–Ω–∞–ª–æ–º (–ª—É—á—à–µ –ø—Ä—è–º–æ –≤ CarsPage —Å–≤–µ—Ä—Ö—É –ø–æ—Å–ª–µ —Ç–∏–ø–æ–≤)

  type CarsPageRow = CarWithRelations; // —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ

  function mapDbRowToCarRow(db: any): CarWithRelations {
    // db = payload.new / payload.old –∏–∑ realtime (—Å—ã—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ cars)
    // —É –Ω–µ—ë snake_case, –±–µ–∑ relations.
    // –ú—ã –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å CarWithRelations –Ω–∞—Å—Ç–æ–ª—å–∫–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.
    const modelName = db.model_name ?? db.modelName ?? db.model ?? "";
    const brandName = db.brand_name ?? db.brandName ?? db.brand ?? "";
    const models = {
      name: String(modelName),
      brands: {
        name: String(brandName),
      },
    };
    return {
      // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç:
      id: db.id,
      vin: db.vin ?? null,
      modelId: db.model_id ?? null,
      year: db.year ?? null,
      fuelType: db.fuel_type ?? null,
      transmission: db.transmission ?? null,
      seats: db.seats ?? null,
      licensePlate: db.license_plate ?? null,
      engineCapacity: db.engine_capacity ?? null,
      status: db.status ?? null,
      bodyType: db.body_type ?? null,
      driveType: db.drive_type ?? null,
      color: db.color ?? null,
      doors: db.doors ?? null,
      photos: Array.isArray(db.photos) ? db.photos : [],
      price: db.price ?? null,
      address: db.address ?? null,
      pickupInfo: db.pickupInfo ?? null,
      returnInfo: db.returnInfo ?? null,
      isDelivery: db.isDelivery ?? null,
      deliveryFee: db.deliveryFee ?? null,
      includeMileage: db.includeMileage ?? null,
      deposit: db.deposit ?? null,
      // üëá relations –∏–∑ realtime –Ω–∞–º –ù–ï –ø—Ä–∏—Ö–æ–¥—è—Ç.
      // –ø–æ–ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å –∏–∑ –∫–µ—à–∞ –ø–æ model_id.
      models,
      locations: db.locations
        ? {
            name: db.locations.name ?? "",
            countries: {
              name: db.locations.countries?.name ?? "",
              id: String(db.locations.countries?.id ?? ""),
            },
          }
        : null,
    };
  }

  // –¥–æ—Å—Ç–∞—ë–º –∏–∑ –∫—ç—à–∞ react-query –º–æ–¥–µ–ª—å –∏ –±—Ä–µ–Ω–¥ (–µ—Å–ª–∏ —É–∂–µ —Ñ–µ—Ç—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—à–∏–Ω—ã)
  function enrichCarRowFromCache(
    qc: ReturnType<typeof useQueryClient>,
    row: CarsPageRow
  ): CarsPageRow {
    // –ø—Ä–æ–±—É–µ–º –ø–æ–¥–Ω—è—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–∑ –∫—ç—à–∞ –¥–µ—Ç–∞–ª–∫–∏
    const full = qc.getQueryData<any>(QK.car(String(row.id)));

    if (!full) {
      return row;
    }

    // —Å–æ–±–µ—Ä—ë–º models (model + brand) –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ full
    const mergedModels = full.model
      ? {
          ...full.model,
          brands: full.model.brands ?? null,
        }
      : row.models ?? null;

    return {
      ...row,

      // relations, –µ—Å–ª–∏ –µ—Å—Ç—å
      models: mergedModels,
      locations: full.locations ?? row.locations ?? null,

      // –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è ‚Äì –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–∑ row –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ full
      licensePlate:
        row.licensePlate ?? full.licensePlate ?? full.license_plate ?? null,

      photos:
        (Array.isArray(row.photos) && row.photos.length > 0
          ? row.photos
          : Array.isArray(full.photos)
          ? full.photos
          : []) ?? [],

      status: row.status ?? full.status ?? null,

      price: row.price ?? full.price ?? null,
    };
  }

  // prepend –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—ç—à–∞ carsByHost
  function prependCarRow(qc: any, newRow: CarsPageRow) {
    qc.setQueriesData(
      {
        predicate: (q: any) =>
          Array.isArray(q.queryKey) && q.queryKey[0] === "carsByHost", // —Ç–æ –∂–µ –∏–º—è —á—Ç–æ –≤ useInfiniteQuery
      },
      (old: any) => {
        if (!old?.pages?.length) {
          return {
            pageParams: [0],
            pages: [{ items: [newRow], count: 1 }],
          };
        }

        const pages = old.pages.slice();
        const first = pages[0];

        // –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –¥—É–±–ª–µ–π
        const exists = Array.isArray(first?.items)
          ? first.items.some((x: any) => String(x.id) === String(newRow.id))
          : false;
        if (exists) return old;

        if (Array.isArray(first?.items)) {
          pages[0] = {
            ...first,
            items: [newRow, ...first.items],
            count: (first.count ?? first.items.length) + 1,
          };
        } else {
          // fallback –Ω–∞ –≤—Å—è–∫–∏–π
          pages[0] = {
            items: [newRow],
            count: 1,
          };
        }

        return { ...old, pages };
      }
    );
  }

  // —É–¥–∞–ª—è–µ–º –º–∞—à–∏–Ω—É –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫—ç—à–∞ carsByHost
  function removeCarRow(qc: any, carId: string) {
    qc.setQueriesData(
      {
        predicate: (q: any) =>
          Array.isArray(q.queryKey) && q.queryKey[0] === "carsByHost",
      },
      (old: any) => {
        if (!old?.pages?.length) {
          return old;
        }

        const newPages = old.pages.map((p: any, idx: number) => {
          if (Array.isArray(p?.items)) {
            // —Ñ–æ—Ä–º–∞—Ç { items, count }
            const before = p.items.length;
            const filtered = p.items.filter(
              (c: any) => String(c.id) !== String(carId)
            );
            return {
              ...p,
              items: filtered,
              count:
                idx === 0
                  ? (p.count ?? before) - (filtered.length < before ? 1 : 0)
                  : p.count,
            };
          } else if (Array.isArray(p)) {
            // —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤

            const filtered = p.filter(
              (c: any) => String(c.id) !== String(carId)
            );

            return filtered;
          } else {
            return p;
          }
        });

        const nextCache = { ...old, pages: newPages };

        return nextCache;
      }
    );

    qc.removeQueries({ queryKey: QK.car(carId), exact: true });
  }

  // –ø–∞—Ç—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—à–∏–Ω—É –≤ –∫—ç—à–µ carsByHost (–±–µ–∑ refetch)
  function patchCarRow(qc: any, updatedRow: CarsPageRow) {
    qc.setQueriesData(
      {
        predicate: (q: any) =>
          Array.isArray(q.queryKey) && q.queryKey[0] === "carsByHost",
      },
      (old: any) => {
        if (!old?.pages?.length) return old;

        const pages = old.pages.map((p: any) => {
          if (!Array.isArray(p?.items)) return p;

          const nextItems = p.items.map((c: any) => {
            if (String(c.id) !== String(updatedRow.id)) return c;

            // –ú—ë—Ä–¥–∂–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ: –æ—Å—Ç–∞–≤–ª—è–µ–º relations –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ,
            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è (status, price etc)
            return {
              ...c,
              ...updatedRow,
              models: c.models ?? updatedRow.models ?? null,
              locations: c.locations ?? updatedRow.locations ?? null,
            };
          });

          return { ...p, items: nextItems };
        });

        return { ...old, pages };
      }
    );

    // –∏ –Ω–∞ –≤—Å—è–∫–∏–π –ø–æ–¥—Ç—é–Ω–∏–º detail-–∫–µ—à, –∫–æ—Ç–æ—Ä—ã–π CarDetails —á–∏—Ç–∞–µ—Ç
    qc.setQueryData(QK.car(String(updatedRow.id)), (oldDetail: any) => {
      if (!oldDetail) return oldDetail;
      return {
        ...oldDetail,
        // —Å–∏–Ω–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
        status:
          updatedRow.status !== undefined
            ? updatedRow.status
            : oldDetail.status,
        price:
          updatedRow.price !== undefined ? updatedRow.price : oldDetail.price,
        licensePlate:
          updatedRow.licensePlate !== undefined
            ? updatedRow.licensePlate
            : oldDetail.licensePlate ?? oldDetail.license_plate ?? null,
        photos:
          Array.isArray(updatedRow.photos) && updatedRow.photos.length > 0
            ? updatedRow.photos
            : oldDetail.photos,
      };
    });
  }

  useEffect(() => {
    return () => {
      trimToFirstPage();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ownerId]);

  useEffect(() => {
    if (!ownerId) return;

    const ch = supabase
      .channel("cars-list-realtime-" + ownerId)
      .on(
        "postgres_changes",
        {
          event: "*",
          schema: "public",
          table: "cars",
          // –±–µ–∑ filter
        },
        (payload) => {
          const evt = payload.eventType as "INSERT" | "UPDATE" | "DELETE";

          const rowAfter = payload.new as any; // INSERT / UPDATE
          const rowBefore = payload.old as any; // DELETE
          const rowDb: any = rowAfter ?? rowBefore;

          if (evt === "DELETE") {
            // ‚úÇ 1. –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –ø–æ id, –≤–æ–æ–±—â–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ owner_id
            const deletedId = rowBefore?.id;
            if (deletedId) {
              removeCarRow(qc, String(deletedId));
            }
            return;
          }

          // –¥–ª—è INSERT/UPDATE –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ owner_id,
          // –ø–æ—Ç–æ–º—É —á—Ç–æ rowAfter.owner_id —É –Ω–∞—Å –µ—Å—Ç—å
          if (!rowDb?.owner_id || String(rowDb.owner_id) !== String(ownerId)) {
            return;
          }

          // –º–∞–ø–ø–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç UI
          let row = mapDbRowToCarRow(rowAfter);
          row = enrichCarRowFromCache(qc, row);

          if (evt === "INSERT") {
            prependCarRow(qc, row);
          } else if (evt === "UPDATE") {
            patchCarRow(qc, row);
          }

          // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
          qc.invalidateQueries({
            predicate: (q) =>
              Array.isArray(q.queryKey) &&
              (q.queryKey[0] === "carsByHost" ||
                (q.queryKey[0] === "car" &&
                  String(q.queryKey[1]) === String(rowAfter.id))),
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(ch);
    };
  }, [ownerId, qc]);

  const countries = countriesQ.data ?? [];
  const locations = locationsQ.data ?? [];

  // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ—Ä—ë–º —Ç–æ, —á—Ç–æ —É–∂–µ –≤ –∫—ç—à–µ/initialData)
  const displayData = carsQ.data;

  const cars: CarWithRelations[] =
    displayData?.pages.flatMap((p) => p.items) ?? [];

  const isFetchingNext = carsQ.isFetchingNextPage;
  const totalLoaded = cars.length;
  const totalAvailable = displayData?.pages?.[0]?.count ?? totalLoaded;
  const canLoadMore = totalLoaded < totalAvailable;

  /* -------- derived filters -------- */
  const filteredCars = useMemo(() => {
    const text = search.trim().toLowerCase();

    const byText = cars.filter((car) => {
      const t = `${car.models?.brands?.name ?? ""} ${car.models?.name ?? ""} ${
        car.licensePlate ?? ""
      }`.toLowerCase();
      return t.includes(text);
    });

    const byCountry = countryId
      ? byText.filter((car) => car.locations?.countries.id === countryId)
      : byText;

    const byStatus = statusFilter
      ? byCountry.filter((car) => car.status === statusFilter)
      : byCountry;

    return byStatus.filter((car) => {
      const loc = car.locations?.name?.toLowerCase() ?? "";
      return (
        locationFilter === "" ||
        loc.includes(locationFilter.trim().toLowerCase())
      );
    });
  }, [cars, search, countryId, locationFilter, statusFilter]);

  /* -------- flags -------- */
  const contentLoading =
    !!ownerId &&
    !displayData &&
    (carsQ.fetchStatus === "fetching" || carsQ.status === "pending");
  const showEmpty = carsQ.status === "success" && filteredCars.length === 0;

  /* -------- actions -------- */
  const addNewCar = useCallback(
    () =>
      navigate("/cars/add", {
        state: { from: loc.pathname + loc.search + loc.hash },
      }),
    [navigate, loc.pathname, loc.search, loc.hash]
  );

  const resetFilters = () => {
    setSearch("");
    setCountryId(null);
    setLocationFilter("");
    setStatusFilter("");
    trimToFirstPage();
  };

  /* -------- guests -------- */
  if (ownerId === null) {
    return (
      <p className="text-zinc-500 text-sm mt-10">Sign in to see your cars</p>
    );
  }

  /* -------- render -------- */
  return (
    <>
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <h1 className="font-roboto text-xl md:text-2xl font-medium md:font-bold">
            Cars
          </h1>
          {totalLoaded > 0 && <Badge color="black">{totalLoaded}</Badge>}
        </div>
        <button
          color="black"
          onClick={addNewCar}
          className="rounded-2xl md:rounded-3xl bg-black py-1 px-2 md:py-2 md:px-3 text-white text-sm hover:opacity-85"
        >
          + Add car
        </button>
      </div>

      {/* Filters (–∫–∞–∫ –±—ã–ª–æ) */}
      <div className="hidden sm:flex flex-wrap gap-3 items-center w-full mb-6">
        <CarFilters
          countries={countries}
          locations={locations}
          countryId={countryId}
          locationFilter={locationFilter}
          statusFilter={statusFilter}
          onChangeCountry={setCountryId}
          onChangeLocation={setLocationFilter}
          onChangeStatus={setStatusFilter}
        />
        <div className="relative flex-1 min-w-[300px]">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 size-4 -translate-y-1/2 text-zinc-500" />
          <TextInput
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ, –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É"
            value={search}
            onChange={(e) => setSearch(e.currentTarget.value)}
            className="w-full rounded-xl bg-white/60 shadow-sm pl-9 pr-3 py-2 text-sm hover:bg-white/80 focus:ring-2 focus:ring-black/10"
          />
        </div>
        <button
          type="button"
          onClick={resetFilters}
          className="p-2 rounded hover:bg-gray-100 active:bg-gray-200 transition"
          aria-label="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
          title="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        >
          <XMarkIcon className="size-5 text-gray-800 stroke-1" />
        </button>
      </div>

      {/* Mobile search + drawer ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      <div className="relative w-full mb-4 sm:hidden">
        <MagnifyingGlassIcon className="absolute left-3 top-1/2 size-4 -translate-y-1/2 text-zinc-500" />
        <TextInput
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ, –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É"
          value={search}
          onChange={(e) => setSearch(e.currentTarget.value)}
          className="w-full rounded-xl bg-white/60 shadow-sm pl-9 pr-3 py-2 text-sm hover:bg-white/80 focus:ring-2 focus:ring-black/10"
        />
      </div>

      <div className="sm:hidden">
        <button
          type="button"
          onClick={() => setMobileFiltersOpen(true)}
          className="fixed bottom-4 left-1/2 -translate-x-1/2 z-50 inline-flex items-center gap-2 rounded-full px-4 py-2 text-sm shadow-md bg-black text-white active:opacity-80"
          aria-label="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        >
          <FunnelIcon className="size-4" />
          Filters
        </button>
      </div>

      <Drawer
        opened={mobileFiltersOpen}
        onClose={() => setMobileFiltersOpen(false)}
        position="bottom"
        withinPortal
        size="35%"
        padding="md"
        keepMounted
        withCloseButton={false}
        overlayProps={{ opacity: 0.2, blur: 2 }}
        styles={{
          content: { borderTopLeftRadius: 16, borderTopRightRadius: 16 },
        }}
      >
        <div className="w-full flex flex-col gap-3 mt-2">
          <CarFilters
            countries={countries}
            locations={locations}
            countryId={countryId}
            locationFilter={locationFilter}
            statusFilter={statusFilter}
            onChangeCountry={setCountryId}
            onChangeLocation={setLocationFilter}
            onChangeStatus={setStatusFilter}
          />
        </div>
        <div className="mt-3 text-right">
          <button
            type="button"
            onClick={resetFilters}
            className="text-sm text-zinc-500 underline underline-offset-4"
          >
            Reset filters
          </button>
        </div>
      </Drawer>

      {/* Content */}
      {contentLoading ? (
        <div className="flex justify-center items-center gap-2 text-center text-zinc-500 mt-10">
          <Loader size="sm" /> Loading...
        </div>
      ) : showEmpty ? (
        <p className="text-zinc-500 text-sm mt-10">Cars not found</p>
      ) : (
        <>
          <CarTable cars={filteredCars} search={search} />
          <div className="w-full flex justify-center mt-6 mb-2">
            {canLoadMore ? (
              <button
                type="button"
                onClick={() => carsQ.fetchNextPage()}
                disabled={isFetchingNext}
                aria-busy={isFetchingNext}
                className="rounded-2xl bg-black text-white px-4 py-2 text-sm hover:opacity-85 disabled:opacity-60"
              >
                {isFetchingNext ? "Loading..." : "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"}
              </button>
            ) : (
              <div className="text-xs text-zinc-400">
                There are no more cars
              </div>
            )}
          </div>
        </>
      )}
    </>
  );
}
